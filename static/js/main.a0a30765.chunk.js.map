{"version":3,"sources":["components/SearchField.jsx","components/ColorSwitcher.jsx","components/ColorPanel.jsx","components/NoteEditor.jsx","components/Note.jsx","components/NotesGrid.jsx","components/NotesApp.jsx","index.js"],"names":["SearchField","props","state","searchQuery","handleSearchQueryChange","bind","_handleKeyDown","event","this","setState","target","value","key","onSearch","className","type","placeholder","onKeyDown","onChange","onClick","Component","ColorSwitcher","setActive","color","onColorChange","styleSwitcher","backgroundColor","isActive","style","SWITCHERS","id","ColorPanel","i","length","map","switcher","NoteEditor","text","handleTextChange","handleColorChange","handleNodeAdd","newNote","Date","now","onNoteAdd","rows","Note","styleNote","children","onDelete","NotesGrid","notesGrid","React","createRef","msnry","Masonry","current","itemSelector","columnWidth","gutter","prevProps","notes","reloadItems","layout","onNoteDelete","ref","note","NotesApp","displayedNotes","handleNoteDelete","handleNoteAdd","handleNoteSearch","_updateLocalStorage","localNotes","JSON","parse","localStorage","getItem","noteId","newNotes","filter","slice","unshift","console","log","toLowerCase","indexOf","stringify","setItem","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a0a30765.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport '../style/search-field.css';\r\n\r\nexport default class SearchField extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            searchQuery: '',\r\n        };\r\n\r\n        this.handleSearchQueryChange = this.handleSearchQueryChange.bind(this);\r\n        this._handleKeyDown = this._handleKeyDown.bind(this);\r\n    }\r\n\r\n    //func to change search query\r\n    handleSearchQueryChange(event) {\r\n        this.setState({ searchQuery: event.target.value });\r\n    }\r\n\r\n    //when user press 'enter'\r\n    _handleKeyDown(event) {\r\n        if (event.key === 'Enter') this.props.onSearch(this.state.searchQuery);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='search-field'>\r\n                <input\r\n                    className='search-input'\r\n                    type='text'\r\n                    value={this.state.searchQuery}\r\n                    placeholder='Search...'\r\n                    onKeyDown={this._handleKeyDown}\r\n                    onChange={this.handleSearchQueryChange}\r\n                />\r\n                <div\r\n                    className='search-icon'\r\n                    onClick={() => this.props.onSearch(this.state.searchQuery)}\r\n                >\r\n                    üîç\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport '../style/color-switcher.css';\r\n\r\nexport default class ColorSwitcher extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.setActive = this.setActive.bind(this);\r\n    }\r\n\r\n    //func that transfer color to change color of note and set active switcher\r\n    setActive() {\r\n        this.props.setActive(this.props.color);\r\n        this.props.onColorChange(this.props.color);\r\n    }\r\n\r\n    render() {\r\n        let styleSwitcher = { backgroundColor: this.props.color };\r\n        styleSwitcher.color =\r\n            this.props.isActive === false ? 'transparent' : 'black';\r\n        return (\r\n            <div\r\n                className='color-switcher'\r\n                style={styleSwitcher}\r\n                onClick={this.setActive}\r\n            >\r\n                {' '}\r\n                ‚úî{' '}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport ColorSwitcher from './ColorSwitcher';\r\n\r\nlet SWITCHERS = [\r\n    {\r\n        id: 1,\r\n        color: '#f3f56c',\r\n        isActive: true,\r\n    },\r\n    {\r\n        id: 2,\r\n        color: '#f26b61',\r\n        isActive: false,\r\n    },\r\n    {\r\n        id: 3,\r\n        color: '#84c5f0',\r\n        isActive: false,\r\n    },\r\n    {\r\n        id: 4,\r\n        color: '#7af088',\r\n        isActive: false,\r\n    },\r\n    {\r\n        id: 5,\r\n        color: '#c184f0',\r\n        isActive: false,\r\n    },\r\n];\r\n\r\nexport default class ColorPanel extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.setActive = this.setActive.bind(this);\r\n    }\r\n\r\n    //func to activate switcher\r\n    setActive(color) {\r\n        for (let i = 0; i < SWITCHERS.length; i++) {\r\n            SWITCHERS[i].isActive = SWITCHERS[i].color === color ? true : false;\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='color-panel'>\r\n                {SWITCHERS.map((switcher) => {\r\n                    return (\r\n                        <ColorSwitcher\r\n                            key={switcher.id}\r\n                            isActive={switcher.isActive}\r\n                            color={switcher.color}\r\n                            onColorChange={this.props.onColorChange}\r\n                            setActive={this.setActive}\r\n                        />\r\n                    );\r\n                })}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport '../style/note-editor.css';\r\nimport ColorPanel from './ColorPanel';\r\n\r\nexport default class NoteEditor extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            text: '',\r\n            color: '#f3f56c',\r\n        };\r\n\r\n        this.handleTextChange = this.handleTextChange.bind(this);\r\n        this.handleColorChange = this.handleColorChange.bind(this);\r\n        this.handleNodeAdd = this.handleNodeAdd.bind(this);\r\n    }\r\n\r\n    //func for changing state text of component\r\n    handleTextChange(event) {\r\n        this.setState({ text: event.target.value });\r\n    }\r\n\r\n    //func for changing color of note\r\n    handleColorChange(value) {\r\n        this.setState({ color: value });\r\n    }\r\n\r\n    //func that create new note and causes callback\r\n    handleNodeAdd() {\r\n        let newNote = {\r\n            text: this.state.text,\r\n            color: this.state.color,\r\n            id: Date.now(),\r\n        };\r\n\r\n        this.props.onNoteAdd(newNote);\r\n        //del text from area when note added\r\n        this.setState({ text: '' });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='note-editor'>\r\n                <textarea\r\n                    className='note-textarea'\r\n                    placeholder='Enter your note here...'\r\n                    rows={7}\r\n                    value={this.state.text}\r\n                    onChange={this.handleTextChange}\r\n                />\r\n                <div className='buttons-panel'>\r\n                    <ColorPanel onColorChange={this.handleColorChange} />\r\n                    <button\r\n                        className='add-note-btn'\r\n                        onClick={this.handleNodeAdd}\r\n                    >\r\n                        Add\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport '../style/note.css';\r\n\r\nexport default class Note extends Component {\r\n    render() {\r\n        let styleNote = { backgroundColor: this.props.color };\r\n        return (\r\n            <div className='note' style={styleNote}>\r\n                {this.props.children}\r\n                <span className='delete-note-btn' onClick={this.props.onDelete}>\r\n                    √ó\r\n                </span>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport Masonry from 'masonry-layout';\r\nimport '../style/notes-grid.css';\r\nimport Note from './Note';\r\n\r\nexport default class NotesGrid extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.notesGrid = React.createRef();\r\n    }\r\n\r\n    //initializing the Masonry so that the blocks are laid with bricks\r\n    componentDidMount() {\r\n        this.msnry = new Masonry(this.notesGrid.current, {\r\n            itemSelector: '.note',\r\n            columnWidth: 200,\r\n            gutter: 10,\r\n        });\r\n    }\r\n\r\n    //compare the array before and after adding note, rebuild the masonry\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.notes.length !== prevProps.notes.length) {\r\n            this.msnry.reloadItems();\r\n            this.msnry.layout();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let onNoteDelete = this.props.onNoteDelete;\r\n        return (\r\n            <div className='notes-grid' ref={this.notesGrid}>\r\n                {\r\n                    //passing parameters for each note\r\n                    this.props.notes.map((note) => {\r\n                        return (\r\n                            <Note\r\n                                key={note.id}\r\n                                color={note.color}\r\n                                onDelete={onNoteDelete.bind(null, note)}\r\n                            >\r\n                                {note.text}\r\n                            </Note>\r\n                        );\r\n                    })\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport '../style/notes-app.css';\r\nimport SearchField from './SearchField';\r\nimport NoteEditor from './NoteEditor';\r\nimport NotesGrid from './NotesGrid';\r\n\r\nexport default class NotesApp extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            notes: [],\r\n            displayedNotes: [],\r\n            searchQuery: '',\r\n        };\r\n\r\n        this.handleNoteDelete = this.handleNoteDelete.bind(this);\r\n        this.handleNoteAdd = this.handleNoteAdd.bind(this);\r\n        this.handleNoteSearch = this.handleNoteSearch.bind(this);\r\n        this._updateLocalStorage = this._updateLocalStorage.bind(this);\r\n    }\r\n\r\n    //when component updated - update localStorage\r\n    componentDidUpdate() {\r\n        this._updateLocalStorage();\r\n    }\r\n\r\n    //when component mount takes notes from localStorage\r\n    componentDidMount() {\r\n        let localNotes = JSON.parse(localStorage.getItem('notes'));\r\n        if (localNotes) {\r\n            this.setState({\r\n                notes: localNotes,\r\n                displayedNotes: localNotes,\r\n            });\r\n        }\r\n    }\r\n\r\n    //func for deleting note\r\n    handleNoteDelete(note) {\r\n        let noteId = note.id;\r\n        let newNotes = this.state.notes.filter(function (note) {\r\n            return note.id !== noteId;\r\n        });\r\n\r\n        //callback need to search notes, when note deleted\r\n        this.setState(\r\n            {\r\n                notes: newNotes,\r\n            },\r\n            () => this.handleNoteSearch(this.state.searchQuery)\r\n        );\r\n    }\r\n\r\n    //func that add new note to array\r\n    handleNoteAdd(newNote) {\r\n        let newNotes = this.state.notes.slice();\r\n        newNotes.unshift(newNote);\r\n\r\n        //callback need to search notes, when note added\r\n        this.setState(\r\n            {\r\n                notes: newNotes,\r\n            },\r\n            () => this.handleNoteSearch(this.state.searchQuery)\r\n        );\r\n    }\r\n\r\n    //func for searching notes\r\n    handleNoteSearch(searchQuery) {\r\n        console.log(this.state.notes);\r\n        let displayedNotes = this.state.notes.filter(function (note) {\r\n            return (\r\n                note.text.toLowerCase().indexOf(searchQuery.toLowerCase()) !==\r\n                -1\r\n            );\r\n        });\r\n\r\n        this.setState({ displayedNotes, searchQuery });\r\n    }\r\n\r\n    //write notes to localStorage\r\n    _updateLocalStorage() {\r\n        let notes = JSON.stringify(this.state.notes);\r\n        localStorage.setItem('notes', notes);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='notes-app'>\r\n                <h1 className='app-header'>NotesApp</h1>\r\n                <SearchField onSearch={this.handleNoteSearch} />\r\n                <NoteEditor onNoteAdd={this.handleNoteAdd} />\r\n                <NotesGrid\r\n                    notes={this.state.displayedNotes}\r\n                    onNoteDelete={this.handleNoteDelete}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport NotesApp from './components/NotesApp';\n\nReactDOM.render(\n    <React.StrictMode>\n        <NotesApp />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n"],"sourceRoot":""}