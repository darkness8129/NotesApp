{"version":3,"sources":["components/SearchField.jsx","components/ColorSwitcher.jsx","components/ColorPanel.jsx","components/NoteEditor/ButtonsPanel.jsx","components/NoteEditor/NoteEditor.jsx","components/Note.jsx","components/NotesGrid.jsx","components/NotesApp.jsx","index.js"],"names":["StyledSearchField","styled","div","SearchInput","input","attrs","props","type","placeholder","SearchIcon","span","SearchField","state","searchQuery","handleSearch","bind","event","this","setState","target","value","onSearch","onChange","Component","StyledColorSwitcher","backgroundColor","ColorSwitcher","setActive","color","onColorChange","onClick","isActive","StyledColorPanel","SWITCHERS","id","ColorPanel","i","length","map","switcher","key","StyledButtonsPanel","AddNoteBtn","button","ButtonsPanel","handleColorChange","handleNodeAdd","StyledNoteEditor","Textarea","textarea","rows","NoteEditor","text","handleTextChange","newNote","Date","now","onNoteAdd","DeleteBtn","StyledNote","Note","className","children","onDelete","as","StyledNotesGrid","NotesGrid","notesGrid","React","createRef","msnry","Masonry","current","itemSelector","columnWidth","fitWidth","gutter","prevProps","notes","reloadItems","layout","onNoteDelete","ref","note","StyledNotesApp","Title","h1","NotesApp","displayedNotes","handleNoteDelete","handleNoteAdd","handleNoteSearch","_updateLocalStorage","localNotes","JSON","parse","localStorage","getItem","noteId","newNotes","filter","slice","unshift","toLowerCase","indexOf","stringify","setItem","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.98901561.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst StyledSearchField = styled.div`\r\n    position: relative;\r\n    margin: 0 auto;\r\n    width: 100%;\r\n    max-width: 250px;\r\n`;\r\n\r\nconst SearchInput = styled.input.attrs((props) => ({\r\n    type: 'text',\r\n    placeholder: 'Search...',\r\n}))`\r\n    &:focus {\r\n        outline: none;\r\n    }\r\n\r\n    display: block;\r\n    width: 100%;\r\n    padding: 10px 10px 10px 30px;\r\n    border: 1px solid #b0afac;\r\n    border-radius: 20px;\r\n`;\r\n\r\nconst SearchIcon = styled.span`\r\n    position: absolute;\r\n    left: 5px;\r\n    top: 7px;\r\n`;\r\n\r\nexport default class SearchField extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            searchQuery: '',\r\n        };\r\n\r\n        this.handleSearch = this.handleSearch.bind(this);\r\n    }\r\n\r\n    //func handle searching\r\n    handleSearch(event) {\r\n        this.setState({ searchQuery: event.target.value }, () => {\r\n            this.props.onSearch(this.state.searchQuery);\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <StyledSearchField>\r\n                <SearchInput\r\n                    value={this.state.searchQuery}\r\n                    onChange={this.handleSearch}\r\n                />\r\n                <SearchIcon>üîç</SearchIcon>\r\n            </StyledSearchField>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst StyledColorSwitcher = styled.div`\r\n    display: inline-block;\r\n    width: 25px;\r\n    height: 25px;\r\n    border-radius: 50%;\r\n    margin: 5px;\r\n    text-align: center;\r\n    cursor: pointer;\r\n    background-color: ${(props) => props.backgroundColor};\r\n`;\r\n\r\nexport default class ColorSwitcher extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.setActive = this.setActive.bind(this);\r\n    }\r\n\r\n    //func that transfer color to change color of note and set active switcher\r\n    setActive() {\r\n        this.props.setActive(this.props.color);\r\n        this.props.onColorChange(this.props.color);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <StyledColorSwitcher\r\n                onClick={this.setActive}\r\n                backgroundColor={this.props.color}\r\n            >\r\n                {this.props.isActive && <span>‚úî</span>}\r\n            </StyledColorSwitcher>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport styled from 'styled-components';\r\nimport ColorSwitcher from './ColorSwitcher';\r\n\r\nconst StyledColorPanel = styled.div`\r\n    display: flex;\r\n`;\r\n\r\nlet SWITCHERS = [\r\n    {\r\n        id: 1,\r\n        color: '#f3f56c',\r\n        isActive: true,\r\n    },\r\n    {\r\n        id: 2,\r\n        color: '#f26b61',\r\n        isActive: false,\r\n    },\r\n    {\r\n        id: 3,\r\n        color: '#84c5f0',\r\n        isActive: false,\r\n    },\r\n    {\r\n        id: 4,\r\n        color: '#7af088',\r\n        isActive: false,\r\n    },\r\n    {\r\n        id: 5,\r\n        color: '#c184f0',\r\n        isActive: false,\r\n    },\r\n];\r\n\r\nexport default class ColorPanel extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.setActive = this.setActive.bind(this);\r\n    }\r\n\r\n    //func to activate switcher\r\n    setActive(color) {\r\n        for (let i = 0; i < SWITCHERS.length; i++) {\r\n            SWITCHERS[i].isActive = SWITCHERS[i].color === color ? true : false;\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <StyledColorPanel>\r\n                {SWITCHERS.map((switcher) => {\r\n                    return (\r\n                        <ColorSwitcher\r\n                            key={switcher.id}\r\n                            isActive={switcher.isActive}\r\n                            color={switcher.color}\r\n                            onColorChange={this.props.onColorChange}\r\n                            setActive={this.setActive}\r\n                        />\r\n                    );\r\n                })}\r\n            </StyledColorPanel>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport styled from 'styled-components';\r\nimport ColorPanel from '../ColorPanel';\r\n\r\nconst StyledButtonsPanel = styled.div`\r\n    display: flex;\r\n    justify-content: space-between;\r\n`;\r\n\r\nconst AddNoteBtn = styled.button`\r\n    &:hover {\r\n        background-color: #5cbf2a;\r\n    }\r\n\r\n    &:active {\r\n        position: relative;\r\n        top: 1px;\r\n    }\r\n\r\n    &:focus {\r\n        outline: 0;\r\n    }\r\n\r\n    align-self: flex-end;\r\n    width: 100px;\r\n    background-color: #44c767;\r\n    border-radius: 28px;\r\n    border: 1px solid #18ab29;\r\n    cursor: pointer;\r\n    color: #ffffff;\r\n    font-size: 14px;\r\n    padding: 8px 8px;\r\n    text-transform: uppercase;\r\n    text-decoration: none;\r\n    text-shadow: 0px 1px 0px #2f6627;\r\n`;\r\n\r\nexport default class ButtonsPanel extends Component {\r\n    render() {\r\n        return (\r\n            <StyledButtonsPanel>\r\n                <ColorPanel onColorChange={this.props.handleColorChange} />\r\n                <AddNoteBtn onClick={this.props.handleNodeAdd}>Add</AddNoteBtn>\r\n            </StyledButtonsPanel>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport styled from 'styled-components';\r\nimport ButtonsPanel from './ButtonsPanel';\r\n\r\nconst StyledNoteEditor = styled.div`\r\n    width: 100%;\r\n    max-width: 600px;\r\n    padding: 16px;\r\n    margin: 16px auto;\r\n    background-color: white;\r\n    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.12), 0 1px 2px rgba(0, 0, 0, 0.24);\r\n    border-radius: 2px;\r\n    display: flex;\r\n    flex-direction: column;\r\n`;\r\n\r\nconst Textarea = styled.textarea.attrs((props) => ({\r\n    placeholder: 'Enter your note here...',\r\n    rows: 7,\r\n}))`\r\n    &:focus {\r\n        outline: 0;\r\n    }\r\n\r\n    width: 100%;\r\n    resize: none;\r\n    margin: 5px;\r\n    font-size: 14px;\r\n    border: none;\r\n    font-weight: 300;\r\n`;\r\n\r\nexport default class NoteEditor extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            text: '',\r\n            color: '#f3f56c',\r\n        };\r\n\r\n        this.handleTextChange = this.handleTextChange.bind(this);\r\n        this.handleColorChange = this.handleColorChange.bind(this);\r\n        this.handleNodeAdd = this.handleNodeAdd.bind(this);\r\n    }\r\n\r\n    //func for changing state text of component\r\n    handleTextChange(event) {\r\n        this.setState({ text: event.target.value });\r\n    }\r\n\r\n    //func for changing color of note\r\n    handleColorChange(value) {\r\n        this.setState({ color: value });\r\n    }\r\n\r\n    //func that create new note and causes callback\r\n    handleNodeAdd() {\r\n        if (this.state.text) {\r\n            let newNote = {\r\n                text: this.state.text,\r\n                color: this.state.color,\r\n                id: Date.now(),\r\n            };\r\n\r\n            this.props.onNoteAdd(newNote);\r\n            //del text from area when note added\r\n            this.setState({ text: '' });\r\n        } else {\r\n            this.setState({\r\n                text: 'You should write something in your note! ',\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <StyledNoteEditor>\r\n                <Textarea\r\n                    value={this.state.text}\r\n                    onChange={this.handleTextChange}\r\n                />\r\n\r\n                <ButtonsPanel\r\n                    handleColorChange={this.handleColorChange}\r\n                    handleNodeAdd={this.handleNodeAdd}\r\n                />\r\n            </StyledNoteEditor>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst DeleteBtn = styled.button`\r\n    position: absolute;\r\n    top: 2px;\r\n    right: 2px;\r\n    display: none;\r\n    color: rgba(0, 0, 0, 0.6);\r\n    cursor: pointer;\r\n`;\r\n\r\nconst StyledNote = styled.div`\r\n    &:hover {\r\n        box-shadow: 0 10px 20px rgba(0, 0, 0, 0.19),\r\n            0 6px 6px rgba(0, 0, 0, 0.23);\r\n        ${DeleteBtn} {\r\n            display: block;\r\n        }\r\n    }\r\n\r\n    width: 200px;\r\n    height: auto;\r\n    float: left;\r\n    background-color: yellow;\r\n    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.12), 0 1px 2px rgba(0, 0, 0, 0.24);\r\n    border-radius: 2px;\r\n    padding: 10px;\r\n    margin-bottom: 10px;\r\n    transition: box-shadow 0.3s;\r\n    white-space: pre-wrap;\r\n    word-wrap: break-word;\r\n    background-color: ${(props) => props.backgroundColor};\r\n`;\r\n\r\nexport default class Note extends Component {\r\n    render() {\r\n        return (\r\n            <StyledNote backgroundColor={this.props.color} className='note'>\r\n                {this.props.children}\r\n                <DeleteBtn onClick={this.props.onDelete} as='span'>\r\n                    √ó\r\n                </DeleteBtn>\r\n            </StyledNote>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport Masonry from 'masonry-layout';\r\nimport Note from './Note';\r\nimport styled from 'styled-components';\r\n\r\nconst StyledNotesGrid = styled.div`\r\n    margin: 0 auto;\r\n`;\r\n\r\nexport default class NotesGrid extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.notesGrid = React.createRef();\r\n    }\r\n\r\n    //initializing the Masonry so that the blocks are laid with bricks\r\n    componentDidMount() {\r\n        this.msnry = new Masonry(this.notesGrid.current, {\r\n            itemSelector: '.note',\r\n            columnWidth: 200,\r\n            fitWidth: true,\r\n            gutter: 10,\r\n        });\r\n    }\r\n\r\n    //compare the array before and after adding note, rebuild the masonry\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.notes.length !== prevProps.notes.length) {\r\n            this.msnry.reloadItems();\r\n            this.msnry.layout();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let onNoteDelete = this.props.onNoteDelete;\r\n        return (\r\n            <StyledNotesGrid ref={this.notesGrid}>\r\n                {\r\n                    //passing parameters for each note\r\n                    this.props.notes.map((note) => {\r\n                        return (\r\n                            <Note\r\n                                key={note.id}\r\n                                color={note.color}\r\n                                onDelete={onNoteDelete.bind(null, note)}\r\n                            >\r\n                                {note.text}\r\n                            </Note>\r\n                        );\r\n                    })\r\n                }\r\n            </StyledNotesGrid>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport SearchField from './SearchField';\r\nimport NoteEditor from './NoteEditor/NoteEditor';\r\nimport NotesGrid from './NotesGrid';\r\nimport styled from 'styled-components';\r\n\r\nconst StyledNotesApp = styled.div`\r\n    max-width: 960px;\r\n    width: 100%;\r\n`;\r\n\r\nconst Title = styled.h1`\r\n    text-align: center;\r\n    font-weight: 500;\r\n    color: grey;\r\n    text-shadow: 0px 2px 3px rgba(255, 255, 255, 0.5);\r\n`;\r\n\r\nexport default class NotesApp extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            notes: [],\r\n            displayedNotes: [],\r\n            searchQuery: '',\r\n        };\r\n\r\n        this.handleNoteDelete = this.handleNoteDelete.bind(this);\r\n        this.handleNoteAdd = this.handleNoteAdd.bind(this);\r\n        this.handleNoteSearch = this.handleNoteSearch.bind(this);\r\n        this._updateLocalStorage = this._updateLocalStorage.bind(this);\r\n    }\r\n\r\n    //when component updated - update localStorage\r\n    componentDidUpdate() {\r\n        this._updateLocalStorage();\r\n    }\r\n\r\n    //when component mount takes notes from localStorage\r\n    componentDidMount() {\r\n        let localNotes = JSON.parse(localStorage.getItem('notes'));\r\n        if (localNotes) {\r\n            this.setState({\r\n                notes: localNotes,\r\n                displayedNotes: localNotes,\r\n            });\r\n        }\r\n    }\r\n\r\n    //func for deleting note\r\n    handleNoteDelete(note) {\r\n        let noteId = note.id;\r\n        let newNotes = this.state.notes.filter(function (note) {\r\n            return note.id !== noteId;\r\n        });\r\n\r\n        //callback need to search notes, when note deleted\r\n        this.setState(\r\n            {\r\n                notes: newNotes,\r\n            },\r\n            () => this.handleNoteSearch(this.state.searchQuery)\r\n        );\r\n    }\r\n\r\n    //func that add new note to array\r\n    handleNoteAdd(newNote) {\r\n        let newNotes = this.state.notes.slice();\r\n        newNotes.unshift(newNote);\r\n\r\n        //callback need to search notes, when note added\r\n        this.setState(\r\n            {\r\n                notes: newNotes,\r\n            },\r\n            () => this.handleNoteSearch(this.state.searchQuery)\r\n        );\r\n    }\r\n\r\n    //func for searching notes\r\n    handleNoteSearch(searchQuery) {\r\n        let displayedNotes = this.state.notes.filter(function (note) {\r\n            return (\r\n                note.text.toLowerCase().indexOf(searchQuery.toLowerCase()) !==\r\n                -1\r\n            );\r\n        });\r\n\r\n        this.setState({ displayedNotes, searchQuery });\r\n    }\r\n\r\n    //write notes to localStorage\r\n    _updateLocalStorage() {\r\n        let notes = JSON.stringify(this.state.notes);\r\n        localStorage.setItem('notes', notes);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <StyledNotesApp>\r\n                <Title>NotesApp</Title>\r\n                <SearchField onSearch={this.handleNoteSearch} />\r\n                <NoteEditor onNoteAdd={this.handleNoteAdd} />\r\n                <NotesGrid\r\n                    notes={this.state.displayedNotes}\r\n                    onNoteDelete={this.handleNoteDelete}\r\n                />\r\n            </StyledNotesApp>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport NotesApp from './components/NotesApp';\n\nReactDOM.render(\n    <React.StrictMode>\n        <NotesApp />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n"],"sourceRoot":""}